// <auto-generated />
using System;
using Infrastructure.Data.MainModule.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Distributed.Services.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Core.Auditory.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BannerPicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.JobLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("JobLabels");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BannerPicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasHired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Snippet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Wage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Postulant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BannerPicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StudyCenter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkingPlaces")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Postulants");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Postulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.ToTable("Postulations");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.SavedJobOffers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("int");

                    b.Property<int>("PostulantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.HasIndex("PostulantId");

                    b.ToTable("SavedJobOffers");
                });

            modelBuilder.Entity("JobLabelJobOffer", b =>
                {
                    b.Property<int>("JobLabelsId")
                        .HasColumnType("int");

                    b.Property<int>("JobOffersId")
                        .HasColumnType("int");

                    b.HasKey("JobLabelsId", "JobOffersId");

                    b.HasIndex("JobOffersId");

                    b.ToTable("JobLabelJobOffer");
                });

            modelBuilder.Entity("PostulantPostulation", b =>
                {
                    b.Property<int>("PostulantsId")
                        .HasColumnType("int");

                    b.Property<int>("PostulationsId")
                        .HasColumnType("int");

                    b.HasKey("PostulantsId", "PostulationsId");

                    b.HasIndex("PostulationsId");

                    b.ToTable("PostulantPostulation");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Company", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.Role", "CompanyRole")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId");

                    b.Navigation("CompanyRole");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.JobOffer", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Postulant", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.Role", "PostulantRole")
                        .WithMany("Postulants")
                        .HasForeignKey("RoleId");

                    b.Navigation("PostulantRole");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Postulation", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.JobOffer", "JobOffer")
                        .WithMany("Postulations")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.SavedJobOffers", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.JobOffer", "JobOffer")
                        .WithMany("SavedJobOffers")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MainModule.Entity.Postulant", "Postulant")
                        .WithMany("SavedJobOffers")
                        .HasForeignKey("PostulantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobOffer");

                    b.Navigation("Postulant");
                });

            modelBuilder.Entity("JobLabelJobOffer", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.JobLabel", null)
                        .WithMany()
                        .HasForeignKey("JobLabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MainModule.Entity.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("JobOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostulantPostulation", b =>
                {
                    b.HasOne("Domain.MainModule.Entity.Postulant", null)
                        .WithMany()
                        .HasForeignKey("PostulantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MainModule.Entity.Postulation", null)
                        .WithMany()
                        .HasForeignKey("PostulationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MainModule.Entity.JobOffer", b =>
                {
                    b.Navigation("Postulations");

                    b.Navigation("SavedJobOffers");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Postulant", b =>
                {
                    b.Navigation("SavedJobOffers");
                });

            modelBuilder.Entity("Domain.MainModule.Entity.Role", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Postulants");
                });
#pragma warning restore 612, 618
        }
    }
}
